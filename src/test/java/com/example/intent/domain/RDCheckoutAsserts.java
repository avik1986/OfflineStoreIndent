package com.example.intent.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RDCheckoutAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRDCheckoutAllPropertiesEquals(RDCheckout expected, RDCheckout actual) {
        assertRDCheckoutAutoGeneratedPropertiesEquals(expected, actual);
        assertRDCheckoutAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRDCheckoutAllUpdatablePropertiesEquals(RDCheckout expected, RDCheckout actual) {
        assertRDCheckoutUpdatableFieldsEquals(expected, actual);
        assertRDCheckoutUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRDCheckoutAutoGeneratedPropertiesEquals(RDCheckout expected, RDCheckout actual) {
        assertThat(actual)
            .as("Verify RDCheckout auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRDCheckoutUpdatableFieldsEquals(RDCheckout expected, RDCheckout actual) {
        assertThat(actual)
            .as("Verify RDCheckout relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getOrderId()).as("check orderId").isEqualTo(expected.getOrderId()))
            .satisfies(a ->
                assertThat(a.getOrderDeliveryStatus()).as("check orderDeliveryStatus").isEqualTo(expected.getOrderDeliveryStatus())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRDCheckoutUpdatableRelationshipsEquals(RDCheckout expected, RDCheckout actual) {
        // empty method
    }
}
