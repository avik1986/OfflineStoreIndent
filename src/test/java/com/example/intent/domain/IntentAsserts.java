package com.example.intent.domain;

import static com.example.intent.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class IntentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntentAllPropertiesEquals(Intent expected, Intent actual) {
        assertIntentAutoGeneratedPropertiesEquals(expected, actual);
        assertIntentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntentAllUpdatablePropertiesEquals(Intent expected, Intent actual) {
        assertIntentUpdatableFieldsEquals(expected, actual);
        assertIntentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntentAutoGeneratedPropertiesEquals(Intent expected, Intent actual) {
        assertThat(actual)
            .as("Verify Intent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntentUpdatableFieldsEquals(Intent expected, Intent actual) {
        assertThat(actual)
            .as("Verify Intent relevant properties")
            .satisfies(a ->
                assertThat(a.getCommission())
                    .as("check commission")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCommission())
            )
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntentUpdatableRelationshipsEquals(Intent expected, Intent actual) {
        assertThat(actual)
            .as("Verify Intent relationships")
            .satisfies(a -> assertThat(a.getArticle()).as("check article").isEqualTo(expected.getArticle()))
            .satisfies(a -> assertThat(a.getStoreManager()).as("check storeManager").isEqualTo(expected.getStoreManager()))
            .satisfies(a -> assertThat(a.getStore()).as("check store").isEqualTo(expected.getStore()))
            .satisfies(a -> assertThat(a.getCoupon()).as("check coupon").isEqualTo(expected.getCoupon()))
            .satisfies(a -> assertThat(a.getRdCheckout()).as("check rdCheckout").isEqualTo(expected.getRdCheckout()));
    }
}
